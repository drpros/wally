import os
import requests
import asyncio
import aiohttp
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import logging
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Fetch API keys from environment variables
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
MORALIS_API_KEY = os.getenv('MORALIS_API_KEY')
DEXSCREENER_URL = "https://api.dexscreener.com/latest/dex/tokens"

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Function to fetch ETH balance from Moralis API
def get_eth_balance(wallet_address):
    try:
        headers = {"X-API-Key": MORALIS_API_KEY}
        response = requests.get(f"https://deep-index.moralis.io/api/v2/{wallet_address}/balance", headers=headers)
        response.raise_for_status()
        data = response.json()
        balance = int(data["balance"]) / 10**18  # Convert from Wei to ETH
        return balance
    except Exception as e:
        logging.error(f"Error fetching ETH balance: {e}")
        return None

# Function to get ERC-20 token balances using Moralis API
def get_erc20_balances(wallet_address):
    try:
        headers = {"X-API-Key": MORALIS_API_KEY}
        response = requests.get(f"https://deep-index.moralis.io/api/v2/{wallet_address}/erc20", headers=headers)
        response.raise_for_status()
        tokens = []
        for token in response.json():
            balance = int(token["balance"]) / 10**int(token["decimals"])
            if balance > 0:
                tokens.append({
                    "name": token.get("name", "Unknown Token"),
                    "symbol": token.get("symbol", ""),
                    "contract_address": token.get("token_address"),
                    "balance": balance
                })
        return tokens
    except Exception as e:
        logging.error(f"Error fetching ERC-20 token balances: {e}")
        return []

# Function to fetch market data using DexScreener API
async def fetch_market_data(session, contract_address):
    try:
        async with session.get(f"{DEXSCREENER_URL}/{contract_address}") as response:
            data = await response.json()
            if "pairs" in data and data["pairs"]:
                pair = data["pairs"][0]
                market_cap = pair.get("fdv")
                price_usd = float(pair.get("priceUsd", 0))
                return contract_address, market_cap, price_usd
    except Exception as e:
        logging.error(f"Error fetching market data: {e}")
    return contract_address, None, None

# Function to get all market data for given contract addresses
async def get_all_market_data(contract_addresses):
    connector = aiohttp.TCPConnector(limit=20)  # Limit concurrent connections to speed up requests
    async with aiohttp.ClientSession(connector=connector) as session:
        tasks = [fetch_market_data(session, addr) for addr in contract_addresses]
        results = await asyncio.gather(*tasks)
        return {addr: (market_cap, price_usd) for addr, market_cap, price_usd in results}

# Telegram bot command to handle /wallet command
async def wallet_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        wallet_address = context.args[0]
    else:
        await update.message.reply_text('Please provide an Ethereum wallet address.\n\nExample:\n/wallet 0xYourEthereumWalletAddressHere')
        return

    if not (wallet_address.startswith('0x') and len(wallet_address) == 42):
        await update.message.reply_text('Please provide a valid Ethereum wallet address (starts with 0x and is 42 characters long).')
        return

    await update.message.reply_text(f'Scanning wallet: {wallet_address}\nPlease wait...')

    eth_balance = get_eth_balance(wallet_address)
    if eth_balance is None:
        await update.message.reply_text('Error fetching ETH balance. Please ensure the wallet address is correct and try again.')
        return

    tokens = get_erc20_balances(wallet_address)
    contract_addresses = [token["contract_address"] for token in tokens]
    market_data = await get_all_market_data(contract_addresses)

    message = f"<b>ETH Balance:</b> {eth_balance:.4f} ETH (Value: N/A)\n\n"
    message += "<b>ERC-20 Tokens:</b>\n"

    for token in tokens:
        address = token["contract_address"]
        market_cap, price_usd = market_data.get(address, (None, None))
        dollar_value = token["balance"] * price_usd if price_usd else 0
        message += (
            f"- <b>{token['name']} ({token['symbol']})</b>:\n  Contract Address: {address}\n  Balance: {token['balance']:.4f}\n  Price (USD): {'$' + format(price_usd, ',.10f') if price_usd else 'N/A'}\n  Market Cap (USD): {'$' + format(market_cap, ',.2f') if market_cap else 'N/A'}\n  Dollar Value (USD): {'$' + format(dollar_value, ',.2f')}\n\n"
        )

    await update.message.reply_text(message, parse_mode='HTML')

# Main function to start the Telegram bot
def main():
    if not TELEGRAM_BOT_TOKEN:
        logging.error('TELEGRAM_BOT_TOKEN is not set. Please set it in the .env file.')
        return

    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler('wallet', wallet_command))
    application.run_polling()

if __name__ == '__main__':
    main()
